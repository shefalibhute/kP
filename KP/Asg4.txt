**************************************************(1)**************************************************

create or replace procedure user_query_emp (p_myeno in emp.empno%type, p_myjob out emp.job%type, p_mysal out emp.sal%type) as
	invalid_empid exception;
	ct number;
begin
	select count(*) into ct from emp where empno=p_myeno;
	if ct = 0 then
		raise invalid_empid;
	else
		select sal, job into p_mysal, p_myjob from emp where empno=p_myeno;
	end if;
exception
	when invalid_empid then
	dbms_output.put_line('Emp id is invalid');
end;
/

declare
	v_job emp.job%type;
	v_sal emp.sal%type;
begin
	user_query_emp(1234,v_job,v_sal);
	if v_sal is not null then
		dbms_output.put_line('Job is '||v_job);
		dbms_output.put_line('Salary is '||v_sal);
	end if;
end;
/

**************************************************(1)**************************************************

**************************************************(2)**************************************************

create or replace function USER_ANNUAL_COMP (p_eno emp.empno%type)  return number as
	p_sal emp.sal%type;
	p_comm emp.comm%type;
	annual_compensation number;
	ct number;
	invalid_empid exception;
begin
	select count(*) into ct from emp where empno=p_eno;
	if ct = 0 then
		raise invalid_empid;
	else
		select sal, nvl(comm,0) into p_sal, p_comm from emp where empno=p_eno;
		annual_compensation:=((p_sal+p_comm)*12);
		return annual_compensation;
	end if;
exception
	when invalid_empid then
	dbms_output.put_line('Emp id is invalid');
end;
/

select USER_ANNUAL_COMP(7200) from dual;

**************************************************(2)**************************************************


**************************************************(3)**************************************************

create or replace function USER_VALID_DEPTNO  (p_dno dept.deptno%type)  return boolean as
	dno number:=0;
	invalid_dept exception;
begin
	select count(*) into dno from dept where deptno=p_dno;
	if (dno != 0) then
		return true;
	else
		return false;
	end if;
end;
/

create or replace procedure SHOW_STRENGTH (p_deptno dept.deptno%type) as
	invalid_dept exception;
	ct number:=0;
begin
	if (user_valid_deptno (p_deptno)) then
		select count(*) into ct from emp where deptno=p_deptno;
		dbms_output.put_line('Department '||p_deptno||' has '||ct||' employees');
	else
		raise invalid_dept;
	end if;

exception
	when invalid_dept then
	dbms_output.put_line('Department not available');
end;
/

execute show_strength(10);

**************************************************(3)**************************************************


**************************************************(4)**************************************************

create or replace procedure SHOW_RECORDS (p_join_date VARCHAR2) as
	dt emp.hiredate%type;
begin
	dt:=to_date(p_join_date,'DD-MM-YYYY');
	
	declare
		cursor c_emp is select * from emp where trunc(hiredate) > trunc (dt);
		v_emp c_emp%rowtype;
	begin
		dbms_output.put_line('Employees hired after '||to_char(dt,'DDth, Month YYYY'));
		dbms_output.put_line('Name'||'      '||'Job'||'      '||'Sal'||'  '||'Dept No');
		open c_emp;
		loop
			fetch c_emp into v_emp;
			exit when c_emp%notfound;
			dbms_output.put_line(v_emp.ename||'   '||v_emp.job||'   '||v_emp.sal||'   '||v_emp.deptno);
		end loop;
	end;
end;
/

execute show_records('21-02-1981');

**************************************************(4)**************************************************


**************************************************(5)**************************************************

create or replace procedure ADD_EMPLOYEE (v_job emp.job%type, v_name emp.ename%type, v_mgr emp.mgr%type, v_hdt emp.hiredate%type, v_sal emp.sal%type, v_comm emp.comm%type, v_dno emp.deptno%type) as
	v_maxno emp.empno%type:=0;
	dno number:=0;
	mno number:=0;
	invalid_job exception;
	low_sal exception;
	invalid_dept exception;
	not_valid_empno exception;
	date_error exception;
	commission_error_1 exception;
	commission_error_2 exception;
begin
	select max(empno) into v_maxno from emp;
	v_maxno:=v_maxno+1;
	
	if v_job = 'PROG' or v_job = 'ACC' or v_job = 'PUB_ACC' then
		dbms_output.put_line('-----Processing-----');
	else
		raise invalid_job;
	end if;

	select count(*) into mno from emp where empno=v_mgr;
	if (mno != 0) then
		dbms_output.put_line('-----Processing-----');
	else
		raise not_valid_empno;
	end if;

	if v_hdt < sysdate then
		dbms_output.put_line('-----Processing-----');
	else
		raise date_error;
	end if;

	if v_sal > 800 then
		dbms_output.put_line('-----Processing-----');
	else
		raise low_sal;
	end if;

	if v_job = 'ACCOUNTANT' then
		if v_comm is not null then
			dbms_output.put_line('-----Processing-----');
		else
			raise commission_error_1;
		end if;
	else
		if v_comm is null then
			dbms_output.put_line('-----Processing-----');
		else
			raise commission_error_2;
		end if;
	end if;

	select count(*) into dno from dept where deptno=v_dno;
	if (dno != 0) then
		dbms_output.put_line('-----Processing-----');
	else
		raise invalid_dept;
	end if;

	insert into emp values(v_maxno,v_name,v_job,v_mgr,v_hdt,v_sal,v_comm,v_dno);
	dbms_output.put_line('One row inserted');


exception
	when invalid_job then
	dbms_output.put_line('Job is invalid');
	when low_sal then
	dbms_output.put_line('Salary has to be greater than 800');
	when invalid_dept then
	dbms_output.put_line('Department not available');
	when not_valid_empno then
	dbms_output.put_line('Manager Id is invalid');
	when date_error then
	dbms_output.put_line('Hire date should be less than todays date');
	when commission_error_1 then
	dbms_output.put_line('Commission cannot be null for accountant');
	when commission_error_2 then
	dbms_output.put_line('Commission has to be null');
end;
/


execute ADD_EMPLOYEE('MANAGER','MARTIAL',1234,'21-JAN-2018',1000,null,10);

Job is invalid

PL/SQL procedure successfully completed.

execute ADD_EMPLOYEE('ACC','MARTIAL',1234,'21-JAN-2018',1000,null,10);

-----Processing-----
Manager Id is invalid

PL/SQL procedure successfully completed.

execute ADD_EMPLOYEE('ACC','MARTIAL',7200,'21-JAN-2018',1000,null,10);

-----Processing-----
-----Processing-----
Hire date should be less than todays date

PL/SQL procedure successfully completed.

execute ADD_EMPLOYEE('ACC','MARTIAL',7200,'21-JAN-1981',700,null,10);

-----Processing-----
-----Processing-----
-----Processing-----
Salary has to be greater than 800

PL/SQL procedure successfully completed.

execute ADD_EMPLOYEE('ACC','MARTIAL',7200,'21-JAN-1981',1000,null,10);

-----Processing-----
-----Processing-----
-----Processing-----
-----Processing-----
Commission cannot be null for accountant

PL/SQL procedure successfully completed.

execute ADD_EMPLOYEE('PROG','MARTIAL',7200,'21-JAN-1981',1000,100,40);

-----Processing-----
-----Processing-----
-----Processing-----
-----Processing-----
Commission has to be null

PL/SQL procedure successfully completed.

execute ADD_EMPLOYEE('PROGRAMMER','MARTIAL',7200,'21-JAN-1981',1000,null,50);

-----Processing-----
-----Processing-----
-----Processing-----
-----Processing-----
-----Processing-----
Department not available

PL/SQL procedure successfully completed.

execute ADD_EMPLOYEE('PROG','MARTIAL',7200,'21-JAN-1981',1000,null,40);

-----Processing-----
-----Processing-----
-----Processing-----
-----Processing-----
-----Processing-----
-----Processing-----
One row inserted


PL/SQL procedure successfully completed.

**************************************************(5)**************************************************


